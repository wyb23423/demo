import { Handler } from '../typings';
declare type Method<T, D, K> = (pathOrHandler: D, handler: K) => T;
export declare type HTTPMethodName = 'get' | 'post' | 'put' | 'head' | 'delete' | 'options' | 'trace' | 'copy' | 'lock' | 'mkcol' | 'move' | 'purge' | 'propfind' | 'proppatch' | 'unlock' | 'report' | 'mkactivity' | 'checkout' | 'merge' | 'notify' | 'subscribe' | 'unsubscribe' | 'patch' | 'search' | 'connect' | 'm-search';
export declare class HTTPMethods<T = any, D = string, K = Handler> {
    get: Method<T, D, K>;
    post: Method<T, D, K>;
    put: Method<T, D, K>;
    head: Method<T, D, K>;
    delete: Method<T, D, K>;
    options: Method<T, D, K>;
    trace: Method<T, D, K>;
    copy: Method<T, D, K>;
    lock: Method<T, D, K>;
    mkcol: Method<T, D, K>;
    move: Method<T, D, K>;
    purge: Method<T, D, K>;
    propfind: Method<T, D, K>;
    proppatch: Method<T, D, K>;
    unlock: Method<T, D, K>;
    report: Method<T, D, K>;
    mkactivity: Method<T, D, K>;
    checkout: Method<T, D, K>;
    merge: Method<T, D, K>;
    notify: Method<T, D, K>;
    subscribe: Method<T, D, K>;
    unsubscribe: Method<T, D, K>;
    patch: Method<T, D, K>;
    search: Method<T, D, K>;
    connect: Method<T, D, K>;
    'm-search': Method<T, D, K>;
    setHTTPMethos(method: HTTPMethodName, handler: Handler, path: string): void;
}
export {};
